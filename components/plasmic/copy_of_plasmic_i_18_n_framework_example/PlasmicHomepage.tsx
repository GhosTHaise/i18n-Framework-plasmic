// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gtteoYLA7Rg8Yjfa9QT5Hy
// Component: IEsxH_TM2R95

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Navbar from "../../Navbar"; // plasmic-import: 5po1E2kj0lwf/component
import Button from "../../Button"; // plasmic-import: MU3DMwx9AwSp/component
import Section from "../../Section"; // plasmic-import: biZ1jyVG14cl/component
import FooterSection from "../../FooterSection"; // plasmic-import: ilJy0VIfsOYQ/component

import { useScreenVariants as useScreenVariantsc8Ti85WTvYmi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: c8ti85WTvYmi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: gtteoYLA7Rg8Yjfa9QT5Hy/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: IEsxH_TM2R95/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: ZtYilcooq-8m/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  headerHeroSection?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  h1?: Flex__<"h1">;
  span?: Flex__<"span">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  englishButton?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  spanishButton?: Flex__<typeof Button>;
  section?: Flex__<typeof Section>;
  img?: Flex__<typeof PlasmicImg__>;
  columns?: Flex__<"div">;
  footerSection?: Flex__<typeof FooterSection>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $translator = usePlasmicTranslator?.();

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsc8Ti85WTvYmi()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"headerHeroSection"}
            data-plasmic-override={overrides.headerHeroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.headerHeroSection)}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <div className={classNames(projectcss.all, sty.freeBox___6Hxwl)}>
              <div className={classNames(projectcss.all, sty.freeBox__xh0I)}>
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  <Trans__>
                    {
                      <React.Fragment>
                        <React.Fragment>{"Welcome to the new "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{
                            color: "#D42E2E",
                            textDecorationLine: "underline",
                            fontStyle: "italic"
                          }}
                        >
                          {"technology"}
                        </span>
                        <React.Fragment>{" of the "}</React.Fragment>
                        {
                          <span
                            data-plasmic-name={"span"}
                            data-plasmic-override={overrides.span}
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.span
                            )}
                          >
                            {"future"}
                          </span>
                        }
                        <React.Fragment>{"."}</React.Fragment>
                      </React.Fragment>
                    }
                  </Trans__>
                </h1>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uw5W
                  )}
                >
                  <Trans__>
                    {
                      <React.Fragment>
                        <React.Fragment>
                          {"Check out this i18n demo!!  It also works with "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"RICH TEXT"}
                        </span>
                        <React.Fragment>{" and "}</React.Fragment>
                        {
                          <PlasmicLink__
                            data-plasmic-name={"link"}
                            data-plasmic-override={overrides.link}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link
                            )}
                            component={Link}
                            href={"https://www.plasmic.app"}
                            platform={"nextjs"}
                          >
                            {"links"}
                          </PlasmicLink__>
                        }
                        <React.Fragment>{"!"}</React.Fragment>
                      </React.Fragment>
                    }
                  </Trans__>
                </div>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wwyj9)}
                >
                  <Button
                    data-plasmic-name={"englishButton"}
                    data-plasmic-override={overrides.englishButton}
                    className={classNames("__wab_instance", sty.englishButton)}
                    color={"blue"}
                    endIcon={
                      <ChevronRightIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                    link={`/`}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9RLnA
                      )}
                    >
                      <Trans__>
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Try demo for free"
                          : "English"}
                      </Trans__>
                    </div>
                  </Button>
                  <Button
                    data-plasmic-name={"spanishButton"}
                    data-plasmic-override={overrides.spanishButton}
                    className={classNames("__wab_instance", sty.spanishButton)}
                    color={"blueBorder"}
                    link={`/`}
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fQvnW
                      )}
                    >
                      <Trans__>
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Learn More"
                          : "Spanish"}
                      </Trans__>
                    </div>
                  </Button>
                </Stack__>
              </div>
            </div>
          </Stack__>
          <Section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames("__wab_instance", sty.section)}
            size={
              hasVariant(globalVariants, "screen", "mobile")
                ? "fullContentWidth"
                : "fullContentWidth"
            }
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"1140px"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={{
                src: "/plasmic/copy_of_plasmic_i_18_n_framework_example/images/image.png",
                fullWidth: 800,
                fullHeight: 533,
                aspectRatio: undefined
              }}
            />

            <div className={classNames(projectcss.all, sty.freeBox___5EhqU)}>
              <div className={classNames(projectcss.all, sty.freeBox__uukp9)}>
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__oxCwW)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__ksFsr
                      )}
                    >
                      <Trans__>{"99%"}</Trans__>
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dlMei
                      )}
                    >
                      <Trans__>{"Open Rates"}</Trans__>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___1Fu0Z)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__sckIa
                      )}
                    >
                      <Trans__>
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "5,2X"
                          : "5,2X"}
                      </Trans__>
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uwJzI
                      )}
                    >
                      <Trans__>
                        {hasVariant(globalVariants, "screen", "mobile")
                          ? "Average traffic increase"
                          : "Average TRAFFIC INCREASE"}
                      </Trans__>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column___4LjtW)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__v1Wl5
                      )}
                    >
                      <Trans__>{"6000+"}</Trans__>
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qucTp
                      )}
                    >
                      <Trans__>{"Trusted Client "}</Trans__>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Section>
          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerHeroSection",
    "navbar",
    "h1",
    "span",
    "link",
    "englishButton",
    "svg",
    "spanishButton",
    "section",
    "img",
    "columns",
    "footerSection"
  ],
  headerHeroSection: [
    "headerHeroSection",
    "navbar",
    "h1",
    "span",
    "link",
    "englishButton",
    "svg",
    "spanishButton"
  ],
  navbar: ["navbar"],
  h1: ["h1", "span"],
  span: ["span"],
  link: ["link"],
  englishButton: ["englishButton", "svg"],
  svg: ["svg"],
  spanishButton: ["spanishButton"],
  section: ["section", "img", "columns"],
  img: ["img"],
  columns: ["columns"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerHeroSection: "div";
  navbar: typeof Navbar;
  h1: "h1";
  span: "span";
  link: "a";
  englishButton: typeof Button;
  svg: "svg";
  spanishButton: typeof Button;
  section: typeof Section;
  img: typeof PlasmicImg__;
  columns: "div";
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    navbar: makeNodeComponent("navbar"),
    h1: makeNodeComponent("h1"),
    span: makeNodeComponent("span"),
    link: makeNodeComponent("link"),
    englishButton: makeNodeComponent("englishButton"),
    svg: makeNodeComponent("svg"),
    spanishButton: makeNodeComponent("spanishButton"),
    section: makeNodeComponent("section"),
    img: makeNodeComponent("img"),
    columns: makeNodeComponent("columns"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
